from django.shortcuts import render

# Create your views here.
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required, user_passes_test
from django.http import HttpResponse
from django.contrib import messages
from django.utils import timezone
from django.db.models import Count, Sum, Avg
import csv
import io
from .models import Report
from .forms import ReportForm
from accounts.models import CustomUser
from tools.models import Tool, Category
from bookings.models import Booking, Payment

def is_admin(user):
    """Check if user is an admin"""
    return user.is_staff or user.is_superuser

@login_required
@user_passes_test(is_admin)
def report_dashboard(request):
    """Admin report dashboard"""
    recent_reports = Report.objects.order_by('-generated_at')[:5]
    
    context = {
        'recent_reports': recent_reports,
    }
    return render(request, 'reports/dashboard.html', context)

@login_required
@user_passes_test(is_admin)
def generate_report(request):
    """Generate a new report"""
    if request.method == 'POST':
        form = ReportForm(request.POST)
        if form.is_valid():
            report = form.save(commit=False)
            report.generated_by = request.user
            report.save()
            
            # Generate the actual report file
            if report.report_type == 'summary':
                return generate_summary_report(request, report)
            elif report.report_type == 'detailed':
                return generate_detailed_report(request, report)
            elif report.report_type == 'exception':
                return generate_exception_report(request, report)
    else:
        form = ReportForm()
    
    return render(request, 'reports/generate_report.html', {'form': form})

def generate_summary_report(request, report):
    """Generate a summary report"""
    start_date = report.start_date
    end_date = report.end_date
    
    # Get summary data
    total_users = CustomUser.objects.count()
    new_users = CustomUser.objects.filter(date_joined__range=[start_date, end_date]).count()
    total_tools = Tool.objects.count()
    new_tools = Tool.objects.filter(created_at__range=[start_date, end_date]).count()
    total_bookings = Booking.objects.count()
    new_bookings = Booking.objects.filter(created_at__range=[start_date, end_date]).count()
    total_revenue = Payment.objects.filter(status='completed').aggregate(Sum('amount'))['amount__sum'] or 0
    period_revenue = Payment.objects.filter(
        status='completed', 
        payment_date__range=[start_date, end_date]
    ).aggregate(Sum('amount'))['amount__sum'] or 0
    
    # Category distribution
    category_stats = Category.objects.annotate(tool_count=Count('tools')).order_by('-tool_count')
    
    # Create CSV file
    buffer = io.StringIO()
    writer = csv.writer(buffer)
    
    # Write header
    writer.writerow(['Summary Report', f'From {start_date} to {end_date}'])
    writer.writerow(['Generated by', request.user.username])
    writer.writerow(['Generated at', timezone.now().strftime('%Y-%m-%d %H:%M:%S')])
    writer.writerow([])
    
    # Write summary data
    writer.writerow(['Metric', 'Total', 'New in Period'])
    writer.writerow(['Users', total_users, new_users])
    writer.writerow(['Tools', total_tools, new_tools])
    writer.writerow(['Bookings', total_bookings, new_bookings])
    writer.writerow(['Revenue', f'${total_revenue}', f'${period_revenue}'])
    writer.writerow([])
    
    # Write category distribution
    writer.writerow(['Category', 'Tool Count', 'Percentage'])
    for category in category_stats:
        percentage = (category.tool_count / total_tools) * 100 if total_tools > 0 else 0
        writer.writerow([category.name, category.tool_count, f'{percentage:.2f}%'])
    
    # Save the file
    buffer.seek(0)
    response = HttpResponse(buffer, content_type='text/csv')
    response['Content-Disposition'] = f'attachment; filename="{report.title}.csv"'
    
    return response

def generate_detailed_report(request, report):
    """Generate a detailed report"""
    start_date = report.start_date
    end_date = report.end_date
    
    # Get detailed data
    bookings = Booking.objects.filter(created_at__range=[start_date, end_date])
    tools = Tool.objects.filter(created_at__range=[start_date, end_date])
    users = CustomUser.objects.filter(date_joined__range=[start_date, end_date])
    payments = Payment.objects.filter(payment_date__range=[start_date, end_date])
    
    # Create CSV file
    buffer = io.StringIO()
    writer = csv.writer(buffer)
    
    # Write header
    writer.writerow(['Detailed Report', f'From {start_date} to {end_date}'])
    writer.writerow(['Generated by', request.user.username])
    writer.writerow(['Generated at', timezone.now().strftime('%Y-%m-%d %H:%M:%S')])
    writer.writerow([])
    
    # Write user data
    writer.writerow(['User Data'])
    writer.writerow(['Username', 'Email', 'Date Joined', 'Is Tool Owner'])
    for user in users:
        writer.writerow([
            user.username,
            user.email,
            user.date_joined.strftime('%Y-%m-%d'),
            'Yes' if user.is_tool_owner else 'No'
        ])
    writer.writerow([])
    
    # Write tool data
    writer.writerow(['Tool Data'])
    writer.writerow(['Name', 'Category', 'Owner', 'Daily Rate', 'Available', 'Created At'])
    for tool in tools:
        writer.writerow([
            tool.name,
            tool.category.name,
            tool.owner.username,
            tool.price_per_day,
            'Yes' if tool.available else 'No',
            tool.created_at.strftime('%Y-%m-%d')
        ])
    writer.writerow([])
    
    # Write booking data
    writer.writerow(['Booking Data'])
    writer.writerow(['User', 'Tool', 'Start Date', 'End Date', 'Rental Period', 'Total Price', 'Status'])
    for booking in bookings:
        writer.writerow([
            booking.user.username,
            booking.tool.name,
            booking.start_date,
            booking.end_date,
            booking.get_rental_period_display(),
            booking.total_price,
            booking.get_status_display()
        ])
    writer.writerow([])
    
    # Write payment data
    writer.writerow(['Payment Data'])
    writer.writerow(['Booking ID', 'Amount', 'Date', 'Status', 'Transaction ID'])
    for payment in payments:
        writer.writerow([
            payment.booking.id,
            payment.amount,
            payment.payment_date.strftime('%Y-%m-%d'),
            payment.get_status_display(),
            payment.transaction_id or 'N/A'
        ])
    
    # Save the file
    buffer.seek(0)
    response = HttpResponse(buffer, content_type='text/csv')
    response['Content-Disposition'] = f'attachment; filename="{report.title}.csv"'
    
    return response

def generate_exception_report(request, report):
    """Generate an exception report"""
    start_date = report.start_date
    end_date = report.end_date
    
    # Get exception data
    failed_payments = Payment.objects.filter(
        status='failed',
        payment_date__range=[start_date, end_date]
    )
    
    # Get overdue bookings
    overdue_bookings = Booking.objects.filter(
        status='active',
        end_date__lt=timezone.now().date()
    )
    
    # Create CSV file
    buffer = io.StringIO()
    writer = csv.writer(buffer)
    
    # Write header
    writer.writerow(['Exception Report', f'From {start_date} to {end_date}'])
    writer.writerow(['Generated by', request.user.username])
    writer.writerow(['Generated at', timezone.now().strftime('%Y-%m-%d %H:%M:%S')])
    writer.writerow([])
    
    # Write failed payments
    writer.writerow(['Failed Payments'])
    writer.writerow(['Booking ID', 'User', 'Tool', 'Amount', 'Date'])
    for payment in failed_payments:
        writer.writerow([
            payment.booking.id,
            payment.booking.user.username,
            payment.booking.tool.name,
            payment.amount,
            payment.payment_date.strftime('%Y-%m-%d')
        ])
    writer.writerow([])
    
    # Write overdue bookings
    writer.writerow(['Overdue Bookings'])
    writer.writerow(['Booking ID', 'User', 'Tool', 'Due Date', 'Days Overdue'])
    for booking in overdue_bookings:
        days_overdue = (timezone.now().date() - booking.end_date).days
        writer.writerow([
            booking.id,
            booking.user.username,
            booking.tool.name,
            booking.end_date,
            days_overdue
        ])
    
    # Save the file
    buffer.seek(0)
    response = HttpResponse(buffer, content_type='text/csv')
    response['Content-Disposition'] = f'attachment; filename="{report.title}.csv"'
    
    return response

@login_required
@user_passes_test(is_admin)
def report_list(request):
    """List all generated reports"""
    reports = Report.objects.all().order_by('-generated_at')
    
    return render(request, 'reports/report_list.html', {
        'reports': reports,
    })
